version: "3.7"
services:
  db:
    image: postgres:14-alpine
    container_name: db
    restart: always
    env_file: .env
    environment:
      - POSTGRES_HOST=localhost
      - POSTGRES_DB=test
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
      - POSTGRES_ROOT_PASSWORD=test
    ports:
      - "5432:5432"
    volumes:
      - data:/var/lib/postgresql/data
      - ./data:/var/lib/postgresql/data
    networks:
      - db
      - localstack-net
  backend:
    image: ${PROJECT}-backend-test:${GIT_LOCAL_BRANCH}
    container_name: ${PROJECT}-backend-test
    build:
      context: "./apps/backend"
      target: development
    networks:
      - localstack-net
    ports:
      - "3001:3000"
    environment:
      - DB_HOST=db
      - DB_NAME=test
      - DB_USER=test
      - DB_PASSWORD=test
      - CHOKIDAR_USEPOLLING="true"
      - APP_PORT=3000
      - NODE_ENV=local
      - RUNTIME_ENV=local
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ca-central-1
      - YARN_VERSION=3.2.3
      - AWS_ENDPOINT=http://localstack:4566
    volumes:
      - ./apps/backend:/usr/src/app
      - /usr/src/app/node_modules
  localstack:
    container_name: ${PROJECT}-localstack
    image: localstack/localstack-full:1.1.0
    networks:
      - localstack-net
    ports:
      - "4566-4599:4566-4599"
      - "8080:8080"
    environment:
      - SERVICES=kinesis,s3,sqs,lambda,iam,events
      - DEBUG=1
      - DATA_DIR=/var/lib/localstack
      - PORT_WEB_UI=8080
      - LAMBDA_EXECUTOR=docker-reuse
      - LAMBDA_REMOTE_DOCKER=false
      - LAMBDA_REMOVE_CONTAINERS=true
      - KINESIS_ERROR_PROBABILITY=${KINESIS_ERROR_PROBABILITY- }
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST_TMP_FOLDER=${TMPDIR}
      - PERSISTENCE=1
    volumes:
      - ./.localstack:/var/lib/localstack
      - ./localstack/init/ready.d:/etc/localstack/init/ready.d
networks:
  localstack-net:
    external: false
    driver: bridge
    name: localstack-net
